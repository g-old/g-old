import knex from '../knex';
import { canSee, canMutate, Models } from '../../core/accessControl';
import { transactify } from './utils';


class {{properCase name}} {
  constructor(data) {
    this.id = data.id
  }

  static async gen(viewer, id, { {{camelCase name}}s }) {
    const data = await {{camelCase name}}s.load(id);
    if (data === null) return null;
    return canSee(viewer, data, Models.{{constantCase name}}) ? new {{properCase name}}(data) : null;
  }

  static async create(viewer, data,loaders,trx) {
    if (!data) return null;
    if (!canMutate(viewer, data, Models.{{constantCase name}})) return null;

    const newData = {
      created_at: new Date(),
    };

    const create{{properCase name}} = async (transaction) =>{
      const  [{{camelCase name}} = null] = await knex('{{snakeCase name}}s')
      .transacting(transaction)
      .insert(newData)
      .returning('*');

      return {{camelCase name}};
    }

    const {{camelCase name}}InDB = await transactify(create{{properCase name}},knex, trx)

    return {{camelCase name}}InDB ? new {{properCase name}}({{camelCase name}}InDB) : null;
  }

  static async update(viewer, data, loaders,trx) {
    if (!data || !data.id) return null;
    if (!canMutate(viewer, data, Models.{{constantCase name}})) return null;
    const newData = { updated_at: new Date() };

    const update{{properCase name}} = async (transaction) =>{
      const  [{{camelCase name}} = null] = await knex('{{snakeCase name}}s')
        .where({id: data.id})
        .transacting(transaction)
        .forUpdate()
        .update(newData)
        .returning('*');

      return {{camelCase name}};
    }

    const updated{{properCase name}}= await transactify(update{{properCase name}},knex, trx)

    return updated{{properCase name}} ? new {{properCase name}}(updated{{properCase name}}) : null;
  }

  static async delete(viewer, data, loaders,trx) {
    if (!data || !data.id) return null;
    if (!canMutate(viewer, data, Models.{{constantCase name}})) return null;

      const delete{{properCase name}} = async (transaction) =>{
      const  [{{camelCase name}} = null] = await knex('{{snakeCase name}}s')
        .where({id: data.id})
        .transacting(transaction)
        .forUpdate()
        .del()

      return {{camelCase name}};
    }

    const deleted{{properCase name}}= await transactify(delete{{properCase name}},knex, trx)

    return deleted{{properCase name}} ? new {{properCase name}}(deleted{{properCase name}}) : null;
  }
}



export default {{properCase name}}
