import knex from '../knex';
import { canSee, canMutate, Models } from '../../core/accessControl';

class {{properCase name}} {
  constructor(data) {
    this.id = data.id
  }

  static async gen(viewer, id, { {{camelCase name}}s }) {
    const data = await {{camelCase name}}s.load(id);
    if (data === null) return null;
    return canSee(viewer, data, Models.{{constantCase name}}) ? new {{properCase name}}(data) : null;
  }

  static async create(viewer, data) {
    if (!data) return null;
    if (!canMutate(viewer, data, Models.{{constantCase name}})) return null;

    const newData = {
      created_at: new Date(),
    };
    const {{camelCase name}}InDB = await knex.transaction(async trx => {
      const  [{{camelCase name}} = null] = await knex('{{snakeCase name}}s')
        .transacting(trx)
        .insert(newData)
        .returning('*');

      return {{camelCase name}};
    });

    return {{camelCase name}}InDB ? new {{properCase name}}({{camelCase name}}InDB) : null;
  }

  static async update(viewer, data, loaders) {
    if (!data || !data.id) return null;
    if (!canMutate(viewer, data, Models.{{constantCase name}})) return null;
    const newData = { updated_at: new Date() };
    const updated{{properCase name}} = await knex.transaction(async trx => {
      let [{{camelCase name}} = null] = await knex('{{snakeCase name}}s')
        .where({id: data.id})
        .transacting(trx)
        .forUpdate()
        .update(newData)
        .returning('*');

      return {{camelCase name}};
    });

    return updated{{properCase name}} ? new {{properCase name}}(updated{{properCase name}}) : null;
  }

  static async delete(viewer, data, loaders) {
    if (!data || !data.id) return null;
    if (!canMutate(viewer, data, Models.{{constantCase name}})) return null;
    const deleted{{properCase name}} = await knex.transaction(async trx => {
      await knex('{{snakeCase name}}s')
        .where({id: data.id})
        .transacting(trx)
        .forUpdate()
        .del()
    });

    return deleted{{properCase name}} ? new {{properCase name}}(deleted{{properCase name}}) : null;
  }
}



export default {{properCase name}}
