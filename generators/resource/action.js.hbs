/* eslint-disable import/prefer-default-export */

import { normalize } from 'normalizr';
import {
  CREATE_{{constantCase name}}_START,
  CREATE_{{constantCase name}}_SUCCESS,
  CREATE_{{constantCase name}}_ERROR,
  UPDATE_{{constantCase name}}_START,
  UPDATE_{{constantCase name}}_SUCCESS,
  UPDATE_{{constantCase name}}_ERROR,
  DELETE_{{constantCase name}}_START,
  DELETE_{{constantCase name}}_SUCCESS,
  DELETE_{{constantCase name}}_ERROR,
  {{#if list}}
  LOAD_{{constantCase name}}S_START,
  LOAD_{{constantCase name}}S_SUCCESS,
  LOAD_{{constantCase name}}S_ERROR,
  {{/if}}
} from '../constants';
import {
  {{camelCase name}} as {{camelCase name}}Schema,
  {{#if list}}
  {{camelCase name}}List as {{camelCase name}}ListSchema,
  {{/if}}
} from '../store/schema';
import { genStatusIndicators } from '../core/helpers';

const {{camelCase name}}Fields = `
id
`;

const create{{properCase name}}Mutation = `
  mutation (${{camelCase name}}:{{properCase name}}Input) {
    create{{properCase name}} ({{camelCase name}}:${{camelCase name}}){
      ${ {{camelCase name}}Fields}
    }
  }
`;

const update{{properCase name}}Mutation = `
  mutation (${{camelCase name}}:{{properCase name}}Input) {
    update{{properCase name}} ({{camelCase name}}:${{camelCase name}}){
      ${ {{camelCase name}}Fields}
    }
  }
`;

const delete{{properCase name}}Mutation = `
  mutation (${{camelCase name}}:{{properCase name}}Input) {
    delete{{properCase name}} ({{camelCase name}}:${{camelCase name}}){
      ${ {{camelCase name}}Fields}
    }
  }
`;

{{#if list }}
const {{camelCase name}}Connection = `
query ($first:Int $after:String) {
  {{camelCase name}}Connection (first:$first after:$after) {
    pageInfo{
      endCursor
      hasNextPage
    }
    edges{
      node{
    ${ {{camelCase name}}Fields}
      }
    }
  }
}
`;
{{/if}}

export function create{{properCase name}}({{camelCase name}}) {
  return async (dispatch, getState, { graphqlRequest }) => {
    const virtualId = '0000';
    const properties = genStatusIndicators(['create{{properCase name}}']);
    dispatch({
      type: CREATE_{{constantCase name}}_START,
      id: virtualId,
      properties,
    });
    try {
      const { data } = await graphqlRequest(create{{properCase name}}Mutation, { {{camelCase name}} });
      const normalizedData = normalize(data.create{{properCase name}}, {{camelCase name}}Schema);
      dispatch({
        type: CREATE_{{constantCase name}}_SUCCESS,
        payload: normalizedData,
        id: virtualId,
        properties,
        {{camelCase name}},
      });
    } catch (error) {
      dispatch({
        type: CREATE_{{constantCase name}}_ERROR,
        payload: {
          error,
        },
        message: error.message || 'Something went wrong',
        id: virtualId,
        {{camelCase name}},
        properties,
      });
      return false;
    }

    return true;
  };
}

export function update{{properCase name}}({{camelCase name}}) {
  return async (dispatch, getState, { graphqlRequest }) => {
    const properties = genStatusIndicators(['update{{camelCase name}}']);
    dispatch({
      type: UPDATE_{{constantCase name}}_START,
      id: {{camelCase name}}.id,
      properties,
    });
    try {
      const { data } = await graphqlRequest(update{{properCase name}}Mutation, { {{camelCase name}} });
      const normalizedData = normalize(data.update{{properCase name}}, {{camelCase name}}Schema);
      dispatch({
        type: UPDATE_{{constantCase name}}_SUCCESS,
        payload: normalizedData,
        properties,
        id: {{camelCase name}}.id,
      });
    } catch (error) {
      dispatch({
        type: UPDATE_{{constantCase name}}_ERROR,
        payload: {
          error,
        },
        properties,
        message: error.message || 'Something went wrong',
        id: {{camelCase name}}.id,
        {{camelCase name}},
      });
      return false;
    }

    return true;
  };
}

export function delete{{properCase name}}({{camelCase name}}) {
  return async (dispatch, getState, { graphqlRequest }) => {
    const properties = genStatusIndicators(['delete{{properCase name}}']);
    dispatch({
      type: DELETE_{{constantCase name}}_START,
      id: {{camelCase name}}.id,
      properties,
    });
    try {
      const { data } = await graphqlRequest(delete{{properCase name}}Mutation, { {{camelCase name}} });
      const normalizedData = normalize(data.delete{{properCase name}}, {{camelCase name}}Schema);
      dispatch({
        type: DELETE_{{constantCase name}}_SUCCESS,
        payload: normalizedData,
        properties,
        id: {{camelCase name}}.id,
      });
    } catch (error) {
      dispatch({
        type: DELETE_{{constantCase name}}_ERROR,
        payload: {
          error,
        },
        message: error.message || 'Something went wrong',
        id: {{camelCase name}}.id,
        properties,
        {{camelCase name}}: { delete: true },
      });
      return false;
    }

    return true;
  };
}

{{#if list}}
export function load{{properCase name}}List({ first, after }) {
  return async (dispatch, getState, { graphqlRequest }) => {
    // TODO caching!

    dispatch({
      type: LOAD_{{constantCase name}}S_START,
    });

    try {
      const { data } = await graphqlRequest({{camelCase name}}Connection, {
        first,
        after,
      });
      const {{camelCase name}}s = data.{{camelCase name}}Connection.edges.map(u => u.node);
      const normalizedData = normalize({{camelCase name}}s, {{camelCase name}}ListSchema);
      dispatch({
        type: LOAD_{{constantCase name}}S_SUCCESS,
        payload: normalizedData,
        pagination: data.{{camelCase name}}Connection.pageInfo,
        savePageInfo: after != null,
      });
    } catch (error) {
      dispatch({
        type: LOAD_{{constantCase name}}S_ERROR,
        payload: {
          error,
        },
        message: error.message || 'Something went wrong',
      });
      return false;
    }

    return true;
  };
}

{{/if}}
